// Script simplificado para testar sincroniza√ß√£o MSRP
// Cole este c√≥digo no console do navegador (F12)

console.log("üî• TESTE SIMPLIFICADO DE SINCRONIZA√á√ÉO MSRP");

// Fun√ß√£o para testar sincroniza√ß√£o
function testMSRPSync() {
  console.log("\nüß™ Iniciando teste de sincroniza√ß√£o MSRP...");
  
  // 1. Verificar se estamos na p√°gina correta
  const isQuoteClient = window.location.pathname.includes('/quote-client');
  const isSales = window.location.pathname.includes('/sales');
  
  console.log("üìç P√°gina atual:", window.location.pathname);
  console.log("üìç √â Quote Client?", isQuoteClient);
  console.log("üìç √â Sales?", isSales);
  
  // 2. Verificar dealer ID
  const dealerId = localStorage.getItem("currentDealerId");
  console.log("üè™ Dealer ID:", dealerId || "‚ùå N√ÉO ENCONTRADO");
  
  if (!dealerId) {
    console.error("‚ùå ERRO: Dealer ID n√£o encontrado. Fa√ßa login novamente.");
    return false;
  }
  
  // 3. Se estiver na p√°gina Sales, simular salvamento de MSRP
  if (isSales) {
    console.log("üí∞ Simulando salvamento de MSRP na p√°gina Sales...");
    
    // Disparar todos os eventos que a p√°gina Sales normalmente dispara
    const testData = {
      dealerId: dealerId,
      itemId: `test_${Date.now()}`,
      itemType: "boat_model",
      itemName: "Test Boat - Manual Sync",
      priceUsd: 60000,
      priceBrl: 300000,
      margin: 20,
      timestamp: Date.now(),
      immediate: true
    };
    
    console.log("üì° Disparando evento salesPriceUpdate...");
    window.dispatchEvent(new CustomEvent('salesPriceUpdate', { detail: testData }));
    
    console.log("üì° Disparando evento dealerPricingUpdate...");
    window.dispatchEvent(new CustomEvent('dealerPricingUpdate', {
      detail: { dealerId, timestamp: Date.now(), immediate: true }
    }));
    
    console.log("üíæ Atualizando localStorage...");
    localStorage.setItem('lastSalesPriceUpdate', JSON.stringify({
      dealerId: dealerId,
      timestamp: Date.now(),
      item: testData
    }));
    
    console.log("‚úÖ Eventos disparados! Verifique a p√°gina Quote Client.");
    return true;
  }
  
  // 4. Se estiver na p√°gina Quote Client, for√ßar reload
  if (isQuoteClient) {
    console.log("üîÑ For√ßando reload na p√°gina Quote Client...");
    
    // Tentar encontrar a fun√ß√£o de reload
    if (window.debugMSRPSync && window.debugMSRPSync.testAPI) {
      window.debugMSRPSync.testAPI(dealerId);
    } else {
      // Disparar eventos para for√ßar reload
      console.log("üì° Disparando eventos para for√ßar reload...");
      
      window.dispatchEvent(new CustomEvent('forceCacheInvalidation', {
        detail: { 
          reason: 'manual_test',
          timestamp: Date.now(),
          dealerId
        }
      }));
      
      window.dispatchEvent(new CustomEvent('dealerPricingUpdate', {
        detail: { dealerId, timestamp: Date.now(), immediate: true }
      }));
    }
    
    console.log("‚úÖ Reload for√ßado! Verifique se os dados foram atualizados.");
    return true;
  }
  
  console.log("‚ö†Ô∏è Esta p√°gina n√£o suporta o teste. V√° para /dealer/sales ou /dealer/quote-client");
  return false;
}

// Fun√ß√£o para verificar status atual
function checkMSRPStatus() {
  console.log("\nüìä STATUS ATUAL DA SINCRONIZA√á√ÉO MSRP");
  
  const dealerId = localStorage.getItem("currentDealerId");
  const lastUpdate = localStorage.getItem('lastSalesPriceUpdate');
  const pricingUpdate = localStorage.getItem('dealerPricingLastUpdate');
  
  console.log("üè™ Dealer ID:", dealerId || "‚ùå N√£o encontrado");
  console.log("üí∞ √öltima atualiza√ß√£o MSRP:", lastUpdate ? JSON.parse(lastUpdate) : "‚ùå Nenhuma");
  console.log("üîÑ √öltimo pricing update:", pricingUpdate || "‚ùå Nenhum");
  
  // Verificar se h√° elementos na p√°gina
  const isQuoteClient = window.location.pathname.includes('/quote-client');
  if (isQuoteClient) {
    const msrpElements = document.querySelectorAll('[title*="MSRP"], [title*="msrp"]');
    console.log("üí∞ Elementos MSRP encontrados na p√°gina:", msrpElements.length);
    
    const pricingCountElements = document.querySelectorAll('*:contains("pre√ßos MSRP"), *:contains("MSRP prices")');
    console.log("üìä Elementos de contagem MSRP:", pricingCountElements.length);
  }
  
  return {
    dealerId,
    lastUpdate: lastUpdate ? JSON.parse(lastUpdate) : null,
    pricingUpdate
  };
}

// Fun√ß√£o para simular uma atualiza√ß√£o completa
function simulateFullUpdate() {
  console.log("\nüöÄ SIMULANDO ATUALIZA√á√ÉO COMPLETA DE MSRP");
  
  const dealerId = localStorage.getItem("currentDealerId");
  if (!dealerId) {
    console.error("‚ùå Dealer ID necess√°rio");
    return false;
  }
  
  console.log("1Ô∏è‚É£ Disparando salesPriceUpdate...");
  window.dispatchEvent(new CustomEvent('salesPriceUpdate', {
    detail: {
      dealerId,
      itemId: `full_test_${Date.now()}`,
      itemType: "boat_model",
      itemName: "Full Test Boat",
      priceUsd: 75000,
      priceBrl: 375000,
      margin: 25,
      timestamp: Date.now(),
      immediate: true
    }
  }));
  
  setTimeout(() => {
    console.log("2Ô∏è‚É£ Disparando dealerPricingUpdate...");
    window.dispatchEvent(new CustomEvent('dealerPricingUpdate', {
      detail: { dealerId, timestamp: Date.now(), immediate: true }
    }));
  }, 500);
  
  setTimeout(() => {
    console.log("3Ô∏è‚É£ Disparando forceCacheInvalidation...");
    window.dispatchEvent(new CustomEvent('forceCacheInvalidation', {
      detail: { 
        reason: 'full_test_update',
        timestamp: Date.now(),
        dealerId
      }
    }));
  }, 1000);
  
  setTimeout(() => {
    console.log("‚úÖ Simula√ß√£o completa finalizada!");
    checkMSRPStatus();
  }, 2000);
  
  return true;
}

// Disponibilizar fun√ß√µes globalmente
window.testMSRPSync = testMSRPSync;
window.checkMSRPStatus = checkMSRPStatus;
window.simulateFullUpdate = simulateFullUpdate;

console.log("\nüéØ FUN√á√ïES DISPON√çVEIS:");
console.log("‚Ä¢ testMSRPSync() - Executa teste b√°sico");
console.log("‚Ä¢ checkMSRPStatus() - Verifica status atual");
console.log("‚Ä¢ simulateFullUpdate() - Simula atualiza√ß√£o completa");

console.log("\nüí° INSTRU√á√ïES:");
console.log("1. Abra a p√°gina /dealer/sales em uma aba");
console.log("2. Abra a p√°gina /dealer/quote-client em outra aba");
console.log("3. Na aba Sales, execute: testMSRPSync()");
console.log("4. Verifique na aba Quote Client se h√° atualiza√ß√µes");
console.log("5. Use checkMSRPStatus() para verificar o estado");

// Executar verifica√ß√£o inicial
checkMSRPStatus();