// Script de debug para verificar sincroniza√ß√£o entre SALES e Quote Client
// Para usar: Cole este c√≥digo no console do navegador em cada aba

console.log("üîç Debug de Sincroniza√ß√£o SALES ‚Üî Quote Client")
console.log("=" .repeat(50))

// Fun√ß√£o para monitorar eventos
function setupSyncMonitor() {
  const events = []
  let isMonitoring = true
  
  // Monitorar eventos customizados
  window.addEventListener('dealerPricingUpdate', (event) => {
    const log = {
      type: 'dealerPricingUpdate',
      time: new Date().toLocaleTimeString(),
      detail: event.detail,
      page: window.location.pathname
    }
    events.push(log)
    console.log("üì° Evento dealerPricingUpdate detectado:", log)
  })
  
  // Monitorar mudan√ßas no localStorage
  window.addEventListener('storage', (event) => {
    if (event.key === 'dealerPricingLastUpdate') {
      const log = {
        type: 'storage',
        time: new Date().toLocaleTimeString(),
        key: event.key,
        oldValue: event.oldValue,
        newValue: event.newValue,
        page: window.location.pathname
      }
      events.push(log)
      console.log("üíæ Storage event detectado:", log)
    }
  })
  
  // Monitorar invalida√ß√£o de cache
  window.addEventListener('forceCacheInvalidation', (event) => {
    const log = {
      type: 'forceCacheInvalidation',
      time: new Date().toLocaleTimeString(),
      detail: event.detail,
      page: window.location.pathname
    }
    events.push(log)
    console.log("üßπ Cache invalidation detectado:", log)
  })
  
  console.log("‚úÖ Monitor de sincroniza√ß√£o ativado")
  console.log("üìç P√°gina atual:", window.location.pathname)
  
  return {
    getEvents: () => events,
    stopMonitoring: () => {
      isMonitoring = false
      console.log("‚èπÔ∏è Monitor desativado")
    }
  }
}

// Fun√ß√£o para verificar estado atual
function checkSyncState() {
  console.log("\nüìä Estado Atual da Sincroniza√ß√£o")
  console.log("-".repeat(40))
  
  const dealerId = localStorage.getItem("currentDealerId")
  const lastUpdate = localStorage.getItem("dealerPricingLastUpdate")
  const updatedBy = localStorage.getItem("dealerPricingUpdatedBy")
  
  console.log("üÜî Dealer ID:", dealerId || "‚ùå N√£o encontrado")
  console.log("‚è∞ √öltima atualiza√ß√£o:", lastUpdate ? new Date(parseInt(lastUpdate)).toLocaleString() : "‚ùå Nunca")
  console.log("üë§ Atualizado por:", updatedBy || "‚ùå Desconhecido")
  console.log("üìç P√°gina atual:", window.location.pathname)
  
  // Verificar se est√° na p√°gina correta
  const isSalesPage = window.location.pathname.includes('/dealer/sales')
  const isQuotePage = window.location.pathname.includes('/dealer/quote-client')
  
  if (isSalesPage) {
    console.log("‚úÖ Voc√™ est√° na p√°gina SALES")
    console.log("üí° Dica: Edite um pre√ßo e salve para testar a sincroniza√ß√£o")
  } else if (isQuotePage) {
    console.log("‚úÖ Voc√™ est√° na p√°gina Quote Client")
    console.log("üí° Dica: Esta p√°gina deve receber atualiza√ß√µes autom√°ticas")
  } else {
    console.log("‚ö†Ô∏è Voc√™ n√£o est√° em SALES nem Quote Client")
  }
  
  return {
    dealerId,
    lastUpdate,
    updatedBy,
    isSalesPage,
    isQuotePage
  }
}

// Fun√ß√£o para simular uma atualiza√ß√£o de pre√ßo (apenas para teste)
function simulatePriceUpdate() {
  const dealerId = localStorage.getItem("currentDealerId")
  
  if (!dealerId) {
    console.error("‚ùå Dealer ID n√£o encontrado. Fa√ßa login primeiro.")
    return
  }
  
  console.log("üöÄ Simulando atualiza√ß√£o de pre√ßo...")
  console.log("  - Dealer ID:", dealerId)
  
  // Disparar evento customizado
  const customEvent = new CustomEvent('dealerPricingUpdate', {
    detail: { 
      dealerId, 
      timestamp: Date.now(),
      source: 'manual_test'
    }
  })
  
  window.dispatchEvent(customEvent)
  console.log("‚úÖ Evento dealerPricingUpdate disparado")
  
  // Atualizar localStorage
  const timestamp = Date.now().toString()
  localStorage.setItem('dealerPricingLastUpdate', timestamp)
  localStorage.setItem('dealerPricingUpdatedBy', dealerId)
  console.log("‚úÖ localStorage atualizado")
  
  // For√ßar storage event (para teste na mesma aba)
  setTimeout(() => {
    const storageEvent = new StorageEvent('storage', {
      key: 'dealerPricingLastUpdate',
      newValue: timestamp,
      oldValue: null,
      url: window.location.href
    })
    window.dispatchEvent(storageEvent)
    console.log("‚úÖ Storage event disparado (fallback)")
  }, 100)
}

// Fun√ß√£o para verificar se o hook est√° ativo
function checkHookStatus() {
  console.log("\nü™ù Verificando Status dos Hooks")
  console.log("-".repeat(40))
  
  // Tentar acessar o React DevTools (se dispon√≠vel)
  try {
    const hasReactDevTools = window.__REACT_DEVTOOLS_GLOBAL_HOOK__
    if (hasReactDevTools) {
      console.log("‚úÖ React DevTools detectado")
    } else {
      console.log("‚ö†Ô∏è React DevTools n√£o detectado")
    }
  } catch (e) {
    console.log("‚ö†Ô∏è N√£o foi poss√≠vel verificar React DevTools")
  }
  
  // Verificar se h√° listeners ativos
  const listeners = window.getEventListeners ? window.getEventListeners(window) : null
  if (listeners) {
    console.log("üì° Event Listeners ativos:")
    Object.keys(listeners).forEach(eventType => {
      if (eventType.includes('dealer') || eventType === 'storage') {
        console.log(`  - ${eventType}: ${listeners[eventType].length} listeners`)
      }
    })
  } else {
    console.log("‚ö†Ô∏è getEventListeners n√£o dispon√≠vel (use Chrome DevTools)")
  }
}

// Fun√ß√£o principal para executar todos os testes
function runSyncDiagnostics() {
  console.clear()
  console.log("üè• DIAGN√ìSTICO COMPLETO DE SINCRONIZA√á√ÉO")
  console.log("=".repeat(50))
  
  // 1. Verificar estado
  const state = checkSyncState()
  
  // 2. Verificar hooks
  checkHookStatus()
  
  // 3. Configurar monitor
  const monitor = setupSyncMonitor()
  
  console.log("\nüìã INSTRU√á√ïES DE TESTE")
  console.log("-".repeat(40))
  
  if (state.isSalesPage) {
    console.log("1. Edite um pre√ßo MSRP em qualquer item")
    console.log("2. Clique em 'Salvar'")
    console.log("3. Execute 'monitor.getEvents()' para ver eventos capturados")
    console.log("4. Verifique a aba Quote Client para ver se atualizou")
  } else if (state.isQuotePage) {
    console.log("1. Mantenha esta aba aberta")
    console.log("2. V√° para a aba SALES e edite um pre√ßo")
    console.log("3. Execute 'monitor.getEvents()' aqui para ver eventos recebidos")
    console.log("4. Verifique se os pre√ßos foram atualizados automaticamente")
  }
  
  console.log("\nüõ†Ô∏è COMANDOS DISPON√çVEIS:")
  console.log("  - checkSyncState(): Verificar estado atual")
  console.log("  - simulatePriceUpdate(): Simular atualiza√ß√£o (teste)")
  console.log("  - monitor.getEvents(): Ver eventos capturados")
  console.log("  - monitor.stopMonitoring(): Parar monitoramento")
  
  return {
    state,
    monitor,
    checkSyncState,
    simulatePriceUpdate,
    checkHookStatus
  }
}

// Executar diagn√≥stico automaticamente
const syncDebug = runSyncDiagnostics()

// Exportar para uso global
window.syncDebug = syncDebug

console.log("\n‚úÖ Debug carregado! Use 'syncDebug' para acessar as ferramentas.")