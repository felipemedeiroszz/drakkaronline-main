// Teste de Debug: Sincroniza√ß√£o em Tempo Real Sales ‚Üî Quote Client
// Este script verifica se a comunica√ß√£o entre as p√°ginas est√° funcionando corretamente

console.log("üß™ INICIANDO TESTE DE DEBUG: Sincroniza√ß√£o Sales ‚Üî Quote Client")
console.log("=" .repeat(60))

// 1. Verificar se estamos na p√°gina correta
const currentPath = window.location.pathname
console.log(`üìç P√°gina atual: ${currentPath}`)

if (currentPath.includes('/sales')) {
  console.log("üè™ SALES PAGE DETECTED - Testando funcionalidades de notifica√ß√£o")
  testSalesPageNotifications()
} else if (currentPath.includes('/quote-client')) {
  console.log("üìã QUOTE CLIENT PAGE DETECTED - Testando funcionalidades de recep√ß√£o")
  testQuoteClientListeners()
} else {
  console.log("‚ùå P√°gina n√£o reconhecida. Execute este script nas p√°ginas Sales ou Quote Client.")
}

function testSalesPageNotifications() {
  console.log("\nüß™ TESTE 1: Verificar se o hook useDealerPricingSync est√° dispon√≠vel")
  
  // Tentar encontrar elementos que indiquem a presen√ßa do hook
  const hasNotificationElements = document.querySelector('[data-testid*="notification"]') || 
                                  document.querySelector('.notification') ||
                                  document.querySelector('[class*="notification"]')
  
  console.log(`  - Elementos de notifica√ß√£o encontrados: ${!!hasNotificationElements}`)
  
  console.log("\nüß™ TESTE 2: Verificar localStorage para sincroniza√ß√£o")
  const dealerId = localStorage.getItem("currentDealerId")
  const lastUpdate = localStorage.getItem("dealerPricingLastUpdate")
  const updatedBy = localStorage.getItem("dealerPricingUpdatedBy")
  
  console.log(`  - Dealer ID: ${dealerId}`)
  console.log(`  - Last Update: ${lastUpdate} (${lastUpdate ? new Date(parseInt(lastUpdate)).toLocaleString() : 'N/A'})`)
  console.log(`  - Updated By: ${updatedBy}`)
  
  console.log("\nüß™ TESTE 3: Simular notifica√ß√£o de atualiza√ß√£o de pre√ßos")
  
  // Simular uma atualiza√ß√£o de pre√ßo
  const testNotification = () => {
    console.log("  üì§ Disparando evento de teste...")
    
    // 1. Atualizar localStorage
    const timestamp = Date.now()
    localStorage.setItem('dealerPricingLastUpdate', timestamp.toString())
    localStorage.setItem('dealerPricingUpdatedBy', dealerId || 'test-dealer')
    console.log(`    ‚úÖ LocalStorage atualizado: ${timestamp}`)
    
    // 2. Disparar evento customizado
    const customEvent = new CustomEvent('dealerPricingUpdate', {
      detail: { dealerId: dealerId || 'test-dealer', timestamp }
    })
    window.dispatchEvent(customEvent)
    console.log(`    ‚úÖ CustomEvent 'dealerPricingUpdate' disparado`)
    
    // 3. Disparar evento espec√≠fico da Sales
    const salesEvent = new CustomEvent('salesPriceUpdate', {
      detail: {
        dealerId: dealerId || 'test-dealer',
        itemId: 'test-item-123',
        itemType: 'boat_model',
        itemName: 'Test Boat Model',
        priceUsd: 50000,
        priceBrl: 250000,
        margin: 15,
        timestamp
      }
    })
    window.dispatchEvent(salesEvent)
    console.log(`    ‚úÖ CustomEvent 'salesPriceUpdate' disparado`)
    
    // 4. Disparar storage event
    const storageEvent = new StorageEvent('storage', {
      key: 'dealerPricingLastUpdate',
      newValue: timestamp.toString(),
      oldValue: lastUpdate || '',
      url: window.location.href
    })
    window.dispatchEvent(storageEvent)
    console.log(`    ‚úÖ StorageEvent disparado`)
    
    // 5. Salvar dados do teste no localStorage para a outra p√°gina
    localStorage.setItem('lastSalesPriceUpdate', JSON.stringify({
      dealerId: dealerId || 'test-dealer',
      item: {
        id: 'test-item-123',
        name: 'Test Boat Model',
        type: 'boat_model'
      },
      timestamp,
      testMode: true
    }))
    console.log(`    ‚úÖ Dados de teste salvos para Quote Client`)
    
    console.log("  üéØ Teste de notifica√ß√£o conclu√≠do!")
    console.log("  üìã Agora v√° para a p√°gina Quote Client e execute este script novamente para verificar se os eventos foram recebidos.")
  }
  
  testNotification()
  
  console.log("\nüß™ TESTE 4: Verificar se h√° bot√µes de Save ativos")
  const saveButtons = document.querySelectorAll('button[onclick*="save"], button[onclick*="Save"], button:contains("Salvar"), button:contains("Save")')
  console.log(`  - Bot√µes de Save encontrados: ${saveButtons.length}`)
  
  if (saveButtons.length > 0) {
    console.log("  üí° Dica: Tente clicar em 'Salvar' ap√≥s editar um pre√ßo para testar a sincroniza√ß√£o real.")
  }
}

function testQuoteClientListeners() {
  console.log("\nüß™ TESTE 1: Verificar listeners de eventos")
  
  // Contador de eventos recebidos
  let eventCount = 0
  
  // Fun√ß√£o para log de eventos
  const logEvent = (eventType, detail) => {
    eventCount++
    console.log(`  üì• [${eventCount}] Evento recebido: ${eventType}`)
    if (detail) {
      console.log(`      Detalhes:`, detail)
    }
  }
  
  // Adicionar listeners de teste
  const testListeners = {
    dealerPricingUpdate: (e) => logEvent('dealerPricingUpdate', e.detail),
    salesPriceUpdate: (e) => logEvent('salesPriceUpdate', e.detail),
    storage: (e) => {
      if (e.key === 'dealerPricingLastUpdate' || e.key === 'lastSalesPriceUpdate') {
        logEvent('storage', { key: e.key, newValue: e.newValue })
      }
    }
  }
  
  // Adicionar listeners
  window.addEventListener('dealerPricingUpdate', testListeners.dealerPricingUpdate)
  window.addEventListener('salesPriceUpdate', testListeners.salesPriceUpdate)  
  window.addEventListener('storage', testListeners.storage)
  
  console.log("  ‚úÖ Listeners de teste adicionados")
  
  console.log("\nüß™ TESTE 2: Verificar dados do localStorage")
  const dealerId = localStorage.getItem("currentDealerId")
  const lastUpdate = localStorage.getItem("dealerPricingLastUpdate")
  const lastSalesUpdate = localStorage.getItem("lastSalesPriceUpdate")
  
  console.log(`  - Dealer ID: ${dealerId}`)
  console.log(`  - Last Pricing Update: ${lastUpdate ? new Date(parseInt(lastUpdate)).toLocaleString() : 'N/A'}`)
  
  if (lastSalesUpdate) {
    try {
      const salesData = JSON.parse(lastSalesUpdate)
      console.log(`  - Last Sales Update:`, salesData)
      if (salesData.testMode) {
        console.log(`    üß™ TESTE DETECTADO! Dados de teste encontrados da p√°gina Sales`)
      }
    } catch (e) {
      console.log(`  - Last Sales Update: ${lastSalesUpdate} (erro ao parsear)`)
    }
  } else {
    console.log(`  - Last Sales Update: N/A`)
  }
  
  console.log("\nüß™ TESTE 3: Simular recebimento de atualiza√ß√£o")
  
  // Simular um evento vindo da p√°gina Sales
  setTimeout(() => {
    console.log("  üì§ Simulando evento de atualiza√ß√£o da Sales...")
    
    const timestamp = Date.now()
    const testEvent = new CustomEvent('salesPriceUpdate', {
      detail: {
        dealerId: dealerId || 'test-dealer',
        itemId: 'simulated-123',
        itemType: 'boat_model',
        itemName: 'Simulated Boat Update',
        priceUsd: 75000,
        priceBrl: 375000,
        margin: 20,
        timestamp
      }
    })
    
    window.dispatchEvent(testEvent)
    console.log("  ‚úÖ Evento simulado disparado")
  }, 2000)
  
  console.log("\nüß™ TESTE 4: Verificar se h√° indicadores visuais de sincroniza√ß√£o")
  
  const syncIndicators = document.querySelectorAll('[class*="sync"], [class*="loading"], [class*="updating"]')
  console.log(`  - Indicadores de sincroniza√ß√£o encontrados: ${syncIndicators.length}`)
  
  syncIndicators.forEach((el, index) => {
    console.log(`    [${index + 1}] ${el.className}`)
  })
  
  console.log("\n‚è±Ô∏è  Aguardando eventos por 10 segundos...")
  console.log("üí° Dica: V√° para a p√°gina Sales e fa√ßa uma altera√ß√£o de pre√ßo para testar a sincroniza√ß√£o real.")
  
  // Remover listeners ap√≥s 10 segundos
  setTimeout(() => {
    window.removeEventListener('dealerPricingUpdate', testListeners.dealerPricingUpdate)
    window.removeEventListener('salesPriceUpdate', testListeners.salesPriceUpdate)
    window.removeEventListener('storage', testListeners.storage)
    
    console.log(`\nüìä RESUMO DO TESTE:`)
    console.log(`  - Total de eventos recebidos: ${eventCount}`)
    console.log(`  - Listeners removidos: ‚úÖ`)
    
    if (eventCount === 0) {
      console.log(`  ‚ö†Ô∏è  PROBLEMA: Nenhum evento foi recebido!`)
      console.log(`     Poss√≠veis causas:`)
      console.log(`     1. Listeners n√£o est√£o sendo configurados corretamente`)
      console.log(`     2. Eventos n√£o est√£o sendo disparados da p√°gina Sales`)
      console.log(`     3. Hook useDealerPricingSync n√£o est√° funcionando`)
    } else {
      console.log(`  ‚úÖ Eventos foram recebidos - sistema b√°sico funcionando`)
    }
  }, 10000)
}

console.log("\n" + "=".repeat(60))
console.log("üß™ TESTE DE DEBUG CONFIGURADO!")
console.log("üìñ Instru√ß√µes:")
console.log("1. Execute este script na p√°gina Sales primeiro")
console.log("2. Execute este script na p√°gina Quote Client em seguida")  
console.log("3. Teste fazendo altera√ß√µes reais de pre√ßos na p√°gina Sales")
console.log("4. Observe os logs para identificar onde est√° o problema")